// <auto-generated />
using System;
using FluencyHub.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FluencyHub.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(FluencyHubDbContext))]
    [Migration("20250422223321_Ajustes")]
    partial class Ajustes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("FluencyHub.Domain.ContentManagement.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("FluencyHub.Domain.ContentManagement.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("FluencyHub.Domain.PaymentProcessing.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FailureReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefundReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.CompletedLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseProgressId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseProgressId");

                    b.HasIndex("CourseProgressId", "LessonId")
                        .IsUnique();

                    b.ToTable("CompletedLessons", (string)null);
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.CourseProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LearningHistoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LearningHistoryId");

                    b.ToTable("CourseProgresses", (string)null);
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.LearningHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LearningHistories", (string)null);
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("FluencyHub.Domain.ContentManagement.Course", b =>
                {
                    b.OwnsOne("FluencyHub.Domain.ContentManagement.CourseContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("LearningObjectives")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Level")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<string>("PreRequisites")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Syllabus")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("TEXT");

                            b1.Property<string>("TargetAudience")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT");

                            b1.HasKey("CourseId");

                            b1.ToTable("CourseContents", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("Content")
                        .IsRequired();
                });

            modelBuilder.Entity("FluencyHub.Domain.ContentManagement.Lesson", b =>
                {
                    b.HasOne("FluencyHub.Domain.ContentManagement.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("FluencyHub.Domain.PaymentProcessing.Payment", b =>
                {
                    b.HasOne("FluencyHub.Domain.StudentManagement.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("FluencyHub.Domain.PaymentProcessing.CardDetails", "CardDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CardHolderName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("ExpiryMonth")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("TEXT");

                            b1.Property<string>("ExpiryYear")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("TEXT");

                            b1.Property<string>("MaskedCardNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.HasKey("PaymentId");

                            b1.ToTable("CardDetails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("CardDetails")
                        .IsRequired();

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.Certificate", b =>
                {
                    b.HasOne("FluencyHub.Domain.ContentManagement.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FluencyHub.Domain.StudentManagement.Student", "Student")
                        .WithMany("Certificates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.CompletedLesson", b =>
                {
                    b.HasOne("FluencyHub.Domain.StudentManagement.CourseProgress", "CourseProgress")
                        .WithMany("CompletedLessons")
                        .HasForeignKey("CourseProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseProgress");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.CourseProgress", b =>
                {
                    b.HasOne("FluencyHub.Domain.StudentManagement.LearningHistory", null)
                        .WithMany("CourseProgress")
                        .HasForeignKey("LearningHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.Enrollment", b =>
                {
                    b.HasOne("FluencyHub.Domain.ContentManagement.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FluencyHub.Domain.StudentManagement.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.LearningHistory", b =>
                {
                    b.OwnsMany("FluencyHub.Domain.StudentManagement.LearningRecord", "Records", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("CompletedAt")
                                .HasColumnType("TEXT");

                            b1.Property<float?>("Grade")
                                .HasColumnType("REAL");

                            b1.Property<Guid>("LearningHistoryId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LessonId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("LearningHistoryId");

                            b1.ToTable("LearningRecords", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LearningHistoryId");
                        });

                    b.Navigation("Records");
                });

            modelBuilder.Entity("FluencyHub.Domain.ContentManagement.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.CourseProgress", b =>
                {
                    b.Navigation("CompletedLessons");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.LearningHistory", b =>
                {
                    b.Navigation("CourseProgress");
                });

            modelBuilder.Entity("FluencyHub.Domain.StudentManagement.Student", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
