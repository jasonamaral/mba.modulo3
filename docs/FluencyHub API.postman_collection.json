{
	"info": {
		"_postman_id": "34f984c8-6018-41cf-89d0-7e449d184613",
		"name": "FluencyHub API",
		"description": "Collection para testar a API do FluencyHub - Plataforma de Educação Online para Cursos de Idioma",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3219041"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"adminToken\", jsonData.token);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Token is present\", function() {",
									"    pm.expect(jsonData.token).to.be.a('string').and.not.empty;",
									"});",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('expiresIn');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@fluencyhub.com\",\n    \"password\": \"Test@123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						},
						"description": "Autenticação de um administrador na plataforma"
					},
					"response": []
				},
				{
					"name": "Login (Student)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"studentToken\", jsonData.token);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Token is present\", function() {",
									"    pm.expect(jsonData.token).to.be.a('string').and.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"aluno@example.com\",\n    \"password\": \"Test@123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						},
						"description": "Autenticação de um aluno na plataforma"
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"newUserToken\", jsonData.token);",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Token is present\", function() {",
									"    pm.expect(jsonData.token).to.be.a('string').and.not.empty;",
									"});",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('expiresIn');",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('firstName');",
									"    pm.expect(jsonData.user).to.have.property('lastName');",
									"    pm.expect(jsonData.user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"aluno@example.com\",\n    \"password\": \"Test@123\",\n    \"firstName\": \"Aluno\",\n    \"lastName\": \"Usuário\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Auth",
								"register"
							]
						},
						"description": "Registra um novo usuário na plataforma"
					},
					"response": []
				}
			],
			"description": "Endpoints para autenticação e registro de usuários"
		},
		{
			"name": "Content Management",
			"item": [
				{
					"name": "Get Course by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Courses",
								"{{courseId}}"
							]
						},
						"description": "Obtém informações detalhadas de um curso específico"
					},
					"response": []
				},
				{
					"name": "Create Course (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extrair e salvar o ID do curso da Location header",
									"var locationHeader = pm.response.headers.get(\"Location\");",
									"if (locationHeader) {",
									"    var courseId = locationHeader.split('/').pop();",
									"    pm.globals.set(\"courseId\", courseId);",
									"    console.log(\"Curso criado com ID: \" + courseId);",
									"}",
									"",
									"// Testes de headers",
									"pm.test(\"Location header is present\", function() {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.exist;",
									"});",
									"",
									"// Testes de estrutura da resposta",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    pm.expect(jsonData).to.have.property('createdAt');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Curso de Inglês para Iniciantes\",\n    \"description\": \"Um curso completo para quem deseja iniciar no idioma inglês\",\n    \"syllabus\": \"Aulas semanais com foco em gramática e conversação\",\n    \"learningObjectives\": \"Ao final do curso, o aluno será capaz de se comunicar em situações básicas do cotidiano\",\n    \"preRequisites\": \"Nenhum conhecimento prévio necessário\",\n    \"targetAudience\": \"Iniciantes sem conhecimento prévio do idioma\",\n    \"language\": \"Inglês\",\n    \"level\": \"A1\",\n    \"price\": 199.99\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Courses"
							]
						},
						"description": "Cria um novo curso na plataforma (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Get Course Classes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						},
						"description": "Obtém todas as aulas de um curso específico"
					},
					"response": []
				},
				{
					"name": "Add Class to Course (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extrair e salvar o ID da aula da Location header",
									"var locationHeader = pm.response.headers.get(\"Location\");",
									"if (locationHeader) {",
									"    var lessonId = locationHeader.split('/').pop();",
									"    pm.globals.set(\"lessonId\", lessonId);",
									"    console.log(\"Aula criada com ID: \" + lessonId);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"{{courseId}}\",\n    \"title\": \"Introdução à Gramática Básica\",\n    \"content\": \"Nesta aula, vamos aprender os princípios básicos da gramática inglesa, incluindo verbos, substantivos e adjetivos.\",\n    \"materialUrl\": \"https://fluencyhub.com/materials/grammar-basics.pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						},
						"description": "Adiciona uma nova aula a um curso existente (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Update Class (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"{{courseId}}\",\n    \"lessonId\": \"{{lessonId}}\",\n    \"title\": \"Introdução à Gramática Básica - Atualizado\",\n    \"content\": \"Conteúdo atualizado com exemplos práticos e exercícios.\",\n    \"materialUrl\": \"https://fluencyhub.com/materials/grammar-basics-updated.pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						},
						"description": "Atualiza uma aula existente (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Update Course (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{courseId}}\",\n    \"name\": \"Curso de Inglês para Iniciantes - Atualizado\",\n    \"description\": \"Curso atualizado com novo conteúdo\",\n    \"syllabus\": \"Novo conteúdo programático\",\n    \"learningObjectives\": \"Novos objetivos de aprendizado\",\n    \"preRequisites\": \"Nenhum conhecimento prévio necessário\",\n    \"targetAudience\": \"Iniciantes sem conhecimento prévio do idioma\",\n    \"language\": \"Inglês\",\n    \"level\": \"A1\",\n    \"price\": 249.99\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Courses",
								"{{courseId}}"
							]
						},
						"description": "Atualiza um curso existente (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Delete Course (Admin)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Courses/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Courses",
								"{{courseId}}"
							]
						},
						"description": "Remove um curso da plataforma (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Delete Class (Admin)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						},
						"description": "Remove uma aula de um curso (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "List All Courses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Courses",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Courses"
							]
						},
						"description": "Lista todos os cursos disponíveis"
					},
					"response": []
				}
			],
			"description": "Endpoints para gerenciar cursos e aulas"
		},
		{
			"name": "Student Management",
			"item": [
				{
					"name": "Get Student by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"{{studentId}}"
							]
						},
						"description": "Obtém informações detalhadas de um aluno específico"
					},
					"response": []
				},
				{
					"name": "Create Student (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extrair e salvar o ID do aluno da Location header",
									"var locationHeader = pm.response.headers.get(\"Location\");",
									"if (locationHeader) {",
									"    var studentId = locationHeader.split('/').pop();",
									"    pm.globals.set(\"studentId\", studentId);",
									"    console.log(\"Aluno criado com ID: \" + studentId);",
									"}",
									"",
									"// Testes de headers",
									"pm.test(\"Location header is present\", function() {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.exist;",
									"});",
									"",
									"// Testes de estrutura da resposta",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('firstName');",
									"    pm.expect(jsonData).to.have.property('lastName');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('dateOfBirth');",
									"    pm.expect(jsonData).to.have.property('phoneNumber');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Carlos\",\n    \"lastName\": \"Silva\",\n    \"email\": \"carlos.silva@example.com\",\n    \"dateOfBirth\": \"1995-03-15\",\n    \"phoneNumber\": \"+5511987654321\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Students",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students"
							]
						},
						"description": "Cria um novo registro de aluno na plataforma (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Update Student",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{studentId}}\",\n    \"firstName\": \"Carlos\",\n    \"lastName\": \"Silva Oliveira\",\n    \"email\": \"carlos.silva@example.com\",\n    \"dateOfBirth\": \"1995-03-15\",\n    \"phoneNumber\": \"+5511998765432\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Students/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"{{studentId}}"
							]
						},
						"description": "Atualiza informações de um aluno existente"
					},
					"response": []
				},
				{
					"name": "Deactivate Student (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students/{{studentId}}/deactivate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"{{studentId}}",
								"deactivate"
							]
						},
						"description": "Desativa um aluno na plataforma (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Activate Student (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students/{{studentId}}/activate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"{{studentId}}",
								"activate"
							]
						},
						"description": "Ativa um aluno que estava desativado (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "List All Students (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students"
							]
						},
						"description": "Lista todos os alunos cadastrados (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "Get Student by Email",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students/email/{{studentEmail}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"email",
								"{{studentEmail}}"
							]
						},
						"description": "Busca um aluno pelo email"
					},
					"response": []
				},
				{
					"name": "List Active Students (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students/active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"active"
							]
						},
						"description": "Lista todos os alunos ativos (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "List Inactive Students (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Students/inactive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Students",
								"inactive"
							]
						},
						"description": "Lista todos os alunos inativos (apenas administradores)"
					},
					"response": []
				}
			],
			"description": "Endpoints para gerenciar dados dos alunos"
		},
		{
			"name": "Enrollment",
			"item": [
				{
					"name": "Student Enroll in Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extrair e salvar o ID da matrícula da Location header",
									"var locationHeader = pm.response.headers.get(\"Location\");",
									"if (locationHeader) {",
									"    var enrollmentId = locationHeader.split('/').pop();",
									"    pm.globals.set(\"enrollmentId\", enrollmentId);",
									"    console.log(\"Matrícula criada com ID: \" + enrollmentId);",
									"}",
									"",
									"// Testes de headers",
									"pm.test(\"Location header is present\", function() {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.exist;",
									"});",
									"",
									"// Testes de estrutura da resposta",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('studentId');",
									"    pm.expect(jsonData).to.have.property('courseId');",
									"    pm.expect(jsonData).to.have.property('enrollmentDate');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"studentId\": \"{{studentId}}\",\n    \"courseId\": \"{{courseId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Enrollments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Enrollments"
							]
						},
						"description": "Matricula um aluno em um curso específico"
					},
					"response": []
				},
				{
					"name": "Get enrollment by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Enrollments/{{enrollmentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Enrollments",
								"{{enrollmentId}}"
							]
						},
						"description": "Obtém detalhes de uma matrícula específica"
					},
					"response": []
				},
				{
					"name": "Get Student Enrollment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Enrollments/student/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Enrollments",
								"student",
								"{{studentId}}"
							]
						},
						"description": "Obtém todas as matrículas de um aluno específico"
					},
					"response": []
				},
				{
					"name": "Cancel Enrollment",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Enrollments/{{enrollmentId}}/cancel",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Enrollments",
								"{{enrollmentId}}",
								"cancel"
							]
						},
						"description": "Cancela uma matrícula existente"
					},
					"response": []
				},
				{
					"name": "List Enrollments by Course",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Enrollments/course/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Enrollments",
								"course",
								"{{courseId}}"
							]
						},
						"description": "Lista todas as matrículas de um curso específico"
					},
					"response": []
				},
				{
					"name": "List Enrollments by Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Enrollments/status/{{status}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Enrollments",
								"status",
								"{{status}}"
							]
						},
						"description": "Lista todas as matrículas por status (Active, PendingPayment, Cancelled, Completed)"
					},
					"response": []
				}
			],
			"description": "Endpoints para gerenciar matrículas de alunos em cursos"
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Process Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extrair e salvar o ID do pagamento da Location header",
									"var locationHeader = pm.response.headers.get(\"Location\");",
									"if (locationHeader) {",
									"    var paymentId = locationHeader.split('/').pop();",
									"    pm.globals.set(\"paymentId\", paymentId);",
									"    console.log(\"Pagamento criado com ID: \" + paymentId);",
									"}",
									"",
									"// Testes de headers",
									"pm.test(\"Location header is present\", function() {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.exist;",
									"});",
									"",
									"// Testes de estrutura da resposta",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('enrollmentId');",
									"    pm.expect(jsonData).to.have.property('amount');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('paymentDate');",
									"    pm.expect(jsonData).to.have.property('transactionId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enrollmentId\": \"{{enrollmentId}}\",\n    \"cardNumber\": \"4111111111111111\",\n    \"cardHolderName\": \"CARLOS SILVA\",\n    \"expirationDate\": \"12/2025\",\n    \"securityCode\": \"123\",\n    \"amount\": 199.99\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments"
							]
						},
						"description": "Processa um pagamento para uma matrícula pendente"
					},
					"response": []
				},
				{
					"name": "Get Payment by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Payments/{{paymentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments",
								"{{paymentId}}"
							]
						},
						"description": "Obtém detalhes de um pagamento específico"
					},
					"response": []
				},
				{
					"name": "Refund Payment (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Curso cancelado pelo aluno\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Payments/{{paymentId}}/refund",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments",
								"{{paymentId}}",
								"refund"
							]
						},
						"description": "Realiza o reembolso de um pagamento (apenas administradores)"
					},
					"response": []
				},
				{
					"name": "List Payments by Student",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Payments/student/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments",
								"student",
								"{{studentId}}"
							]
						},
						"description": "Lista todos os pagamentos de um aluno específico"
					},
					"response": []
				},
				{
					"name": "List Payments by Course",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Payments/course/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments",
								"course",
								"{{courseId}}"
							]
						},
						"description": "Lista todos os pagamentos de um curso específico"
					},
					"response": []
				},
				{
					"name": "List Payments by Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Payments/status/{{status}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments",
								"status",
								"{{status}}"
							]
						},
						"description": "Lista todos os pagamentos por status (Pending, Successful, Failed, Refunded)"
					},
					"response": []
				},
				{
					"name": "List Refunds",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Payments/refunds",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Payments",
								"refunds"
							]
						},
						"description": "Lista todos os reembolsos realizados"
					},
					"response": []
				}
			],
			"description": "Endpoints para gerenciar pagamentos"
		},
		{
			"name": "Certificates",
			"item": [
				{
					"name": "Generate Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Extrair e salvar o ID do certificado da Location header",
									"var locationHeader = pm.response.headers.get(\"Location\");",
									"if (locationHeader) {",
									"    var certificateId = locationHeader.split('/').pop();",
									"    pm.globals.set(\"certificateId\", certificateId);",
									"    console.log(\"Certificado criado com ID: \" + certificateId);",
									"}",
									"",
									"// Testes de headers",
									"pm.test(\"Location header is present\", function() {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.exist;",
									"});",
									"",
									"// Testes de estrutura da resposta",
									"var jsonData = JSON.parse(responseBody);",
									"pm.test(\"Response has correct structure\", function() {",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('studentId');",
									"    pm.expect(jsonData).to.have.property('courseId');",
									"    pm.expect(jsonData).to.have.property('issueDate');",
									"    pm.expect(jsonData).to.have.property('expirationDate');",
									"    pm.expect(jsonData).to.have.property('certificateNumber');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"studentId\": \"{{studentId}}\",\n    \"courseId\": \"{{courseId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/Certificates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Certificates"
							]
						},
						"description": "Gera um certificado de conclusão para um curso finalizado"
					},
					"response": []
				},
				{
					"name": "Get Certificate by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Certificates/{{certificateId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Certificates",
								"{{certificateId}}"
							]
						},
						"description": "Obtém detalhes de um certificado específico"
					},
					"response": []
				},
				{
					"name": "Obtain Student Certificates",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Certificates/student/{{studentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Certificates",
								"student",
								"{{studentId}}"
							]
						},
						"description": "Obtém todos os certificados de um aluno específico"
					},
					"response": []
				},
				{
					"name": "Validate Certificate",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{studentToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Certificates/{{certificateId}}/validate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Certificates",
								"{{certificateId}}",
								"validate"
							]
						},
						"description": "Valida a autenticidade de um certificado"
					},
					"response": []
				},
				{
					"name": "List Certificates by Course",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Certificates/course/{{courseId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Certificates",
								"course",
								"{{courseId}}"
							]
						},
						"description": "Lista todos os certificados emitidos para um curso específico"
					},
					"response": []
				},
				{
					"name": "List Certificates by Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/Certificates/status/{{status}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"Certificates",
								"status",
								"{{status}}"
							]
						},
						"description": "Lista todos os certificados por status (Issued, Revoked)"
					},
					"response": []
				}
			],
			"description": "Endpoints para gerenciar certificados de conclusão"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Configurações iniciais para todos os testes",
					"console.log('Iniciando teste...');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Testes globais para todas as requisições",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"});",
					"",
					"pm.test(\"Content-Type header is present\", function () {",
					"    pm.response.to.have.header('Content-Type');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:7152",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "studentToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "newUserToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "courseId",
			"value": "",
			"type": "string"
		},
		{
			"key": "lessonId",
			"value": "",
			"type": "string"
		},
		{
			"key": "enrollmentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "certificateId",
			"value": "",
			"type": "string"
		},
		{
			"key": "paymentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "studentEmail",
			"value": "aluno@example.com",
			"type": "string"
		},
		{
			"key": "status",
			"value": "Active",
			"type": "string"
		}
	]
}